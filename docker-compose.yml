version: '3.8'

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  postgres_data:

services:
  # Core Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-changeme}
      - GF_INSTALL_PLUGINS=redis-datasource
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - monitoring
    depends_on:
      - prometheus

  # System & Container Monitoring
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    ports:
      - "8080:8080"
    networks:
      - monitoring

  # Sample Applications to Monitor
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - monitoring
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9113"

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    restart: unless-stopped
    command:
      - '-nginx.scrape-uri=http://nginx/nginx_status'
    ports:
      - "9113:9113"
    networks:
      - monitoring
    depends_on:
      - nginx

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - monitoring

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis:6379
    ports:
      - "9121:9121"
    networks:
      - monitoring
    depends_on:
      - redis

  postgres:
    image: postgres:14-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=metrics_db
      - POSTGRES_USER=metrics_user
      - POSTGRES_PASSWORD=metrics_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - monitoring

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://metrics_user:metrics_pass@postgres:5432/metrics_db?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - monitoring
    depends_on:
      - postgres

  # Python application with custom metrics
  python-app:
    build:
      context: ./applications/python-app
      dockerfile: Dockerfile
    container_name: python-app
    restart: unless-stopped
    environment:
      - PROMETHEUS_MULTIPROC_DIR=/tmp
    ports:
      - "8000:8000"
    networks:
      - monitoring
    volumes:
      - ./applications/python-app:/app
    deploy:                              # ADD THIS SECTION
      resources:
        limits:
          memory: 256M                   # Limit to 256MB
        reservations:
          memory: 128M                   # Reserve 128MB minimum

  # Load generator for testing
  load-generator:
    build:
      context: ./applications/load-generator
      dockerfile: Dockerfile
    container_name: load-generator
    restart: unless-stopped
    environment:
      - TARGET_URLS=http://nginx,http://python-app:8000/metrics,http://python-app:8000/api/test
      - REQUEST_INTERVAL=5
    networks:
      - monitoring
    depends_on:
      - nginx
      - python-app

  # GPU Infrastructure Simulator
  gpu-simulator:
    build:
      context: ./simulators
      dockerfile: Dockerfile.gpu
    container_name: gpu-simulator
    restart: unless-stopped
    ports:
      - "9400:9400"
    networks:
      - monitoring
    environment:
      - GPU_FAILURE_RATE=0.001

  # ML Workload Simulator  
  ml-simulator:
    build:
      context: ./simulators
      dockerfile: Dockerfile.ml
    container_name: ml-simulator
    restart: unless-stopped
    ports:
      - "9500:9500"
    networks:
      - monitoring
